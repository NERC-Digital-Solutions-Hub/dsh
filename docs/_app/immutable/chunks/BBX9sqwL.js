import{z as a,_ as u}from"./D4R7oZu3.js";import{c as p}from"./QRg3dG5A.js";import{c as i,f as S,I as y,R as d,T as x,D as h,j as O,u as N,s as J}from"./DjiKo13h.js";import{h as B,j as P,_ as g,p as k}from"./-cZpGiou.js";import{T as v}from"./DZf7dbrW.js";import{v as z,s as b}from"./LLZoO1J_.js";import{t as w,m as T,n as D}from"./frCvLbk9.js";import{r as f,a as $}from"./iFuBOtDF.js";import"./BfhsIlKo.js";import"./DHq0rblm.js";import{r as I}from"./Bvto7RYj.js";var m;let l=m=class extends w{constructor(){super(...arguments),this.type="identity"}clone(){return new m}};f([I({IdentityXform:"identity"})],l.prototype,"type",void 0),l=m=f([$("esri.layers.support.rasterTransforms.IdentityTransform")],l);const j={GCSShiftXform:D,IdentityXform:l,PolynomialXform:T};function F(n){if(!n?.type)return null;const e=j[n?.type];if(e){const r=new e;return r.read(n),r}return null}class W{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),r=S(e,t.type);return Promise.resolve(r!=null?r.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),r=B(e);return Promise.resolve(r)}async decode(t){const e=await P(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?a.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){this.symbolizer=g.fromJSON(t.symbolizerJSON),t.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=v(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:a.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map((r=>r!=null?i.fromJSON(r):null)),primaryPixelSizes:t.primaryPixelSizes?.map((r=>r!=null?u.fromJSON(r):null)),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e?.toJSON())}estimateStatisticsHistograms(t){const e=k(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=y(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach(((r,o)=>{e.set(o,r?.toJSON())})),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),r=d({...t,pixelBlock:e});return Promise.resolve(r?.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map((c=>c?new i(c):null)),r=x(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let o,s=r;return t.coefs&&(s=h(r,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(o=O(t.destDimension,t.gcsGrid),s=N(s,t.isUV?"vector-uv":"vector-magdir",o)),{pixelBlock:s?.toJSON(),localNorthDirections:o}}async createFlowMesh(t,e){const r={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:o,indexData:s}=await J(t.meshType,t.simulationSettings,r,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:s.buffer},transferList:[o.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=a.fromJSON(t.projectedExtent),r=a.fromJSON(t.srcBufferExtent);let o=null;t.datumTransformationSteps?.length&&(o=new p({steps:t.datumTransformationSteps})),await z();const s=t.rasterTransform?F(t.rasterTransform):null;return b({...t,projectedExtent:e,srcBufferExtent:r,datumTransformation:o,rasterTransform:s})}}export{W as default};
