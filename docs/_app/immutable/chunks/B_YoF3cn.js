import{l as m,r as a,m as y,a as d,H as f,cl as g,i as w}from"./-Rap9rN9.js";import{i as v}from"./BbbIu4cx.js";import{f as S,u as $,s as j}from"./-1lFHQHv.js";import{d as I}from"./CcHv5nZx.js";let n=class extends m{constructor(e){super(e),this.associations=[]}};a([y({type:[I],json:{write:!0}})],n.prototype,"associations",void 0),n=a([d("esri.rest.networks.support.QueryAssociationsResult")],n);function J(s){const{returnDeletes:e,elements:r,gdbVersion:o,moment:i}=s.toJSON();return{returnDeletes:e,elements:JSON.stringify(r.map((t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId})))),types:JSON.stringify(s.types.map((t=>v.toJSON(t)))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:o,moment:i??Date.now()}}async function A(s,e,r){const o=S(s),i={...J(e),f:"json"},t=$({...o.query,...i}),c=j(t,{...r,method:"post"}),u=`${o.path}/associations/query`,{data:p}=await f(u,c),l=n.fromJSON(p);return e.types.includes("connectivity")&&g(w.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://arcg.is/11Tr8a#types",version:"4.29",warnOnce:!0}),l}export{A as queryAssociations};
