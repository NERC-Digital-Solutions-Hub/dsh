import{l,i as u,G as d,r as e,m as r,v as o,a as m,aR as y}from"./-Rap9rN9.js";import{a as c,u as h}from"./Buev1GnW.js";import{r as n}from"./Dw1G2G-_.js";import{f as v}from"./Do8kswpP.js";import{l as f}from"./Cs2HcN_w.js";import{g as a}from"./Ct8cSOaC.js";import{m as w,n as b,a as j,b as g,y as S}from"./BHqZa0F8.js";import{p as R,s as $}from"./FSKIctMT.js";import{p as T}from"./-pkGuJgg.js";const B=new d({asc:"ascending",desc:"descending"}),x={base:S,key:"type",typeMap:{"auto-interval":g,date:j,"fixed-boundaries":b,"fixed-interval":w}};let t=class extends c.ClonableMixin(l){constructor(i){super(i),this.binParameters=null,this.binOrder="ascending",this.cacheHint=void 0,this.datumTransformation=null,this.defaultSpatialReference=null,this.distance=void 0,this.geometry=null,this.lowerBoundaryAlias=null,this.outSpatialReference=null,this.outStatistics=null,this.returnDistinctValues=null,this.spatialRelationship="intersects",this.timeExtent=null,this.upperBoundaryAlias=null,this.units=null,this.where="1=1"}set outTimeZone(i){this._set("outTimeZone",i),i&&!T(i)&&u.getLogger(this).warn("#outTimeZone",`the parsed value '${i}' may not be a valid IANA time zone`)}};e([r({types:x,json:{name:"bin",write:!0}})],t.prototype,"binParameters",void 0),e([n(B)],t.prototype,"binOrder",void 0),e([r({type:Boolean,json:{write:!0}})],t.prototype,"cacheHint",void 0),e([r({json:{write:!0}})],t.prototype,"datumTransformation",void 0),e([r({type:o,json:{name:"defaultSR",write:!0}})],t.prototype,"defaultSpatialReference",void 0),e([r({type:Number,json:{write:{overridePolicy:i=>({enabled:i>0})}}})],t.prototype,"distance",void 0),e([r({types:f,json:{read:v,write:!0}})],t.prototype,"geometry",void 0),e([r({type:String,json:{write:!0}})],t.prototype,"lowerBoundaryAlias",void 0),e([r({type:o,json:{name:"outSR",write:!0}})],t.prototype,"outSpatialReference",void 0),e([r({type:[R],json:{write:{enabled:!0,overridePolicy(){return{enabled:this.outStatistics!=null&&this.outStatistics.length>0}}}}})],t.prototype,"outStatistics",void 0),e([r({value:null,json:{name:"outTimeReference",read:{reader:i=>i.ianaTimeZone},write:{writer:(i,s,p)=>{i&&(s[p]={ianaTimeZone:i})}}}})],t.prototype,"outTimeZone",null),e([r({type:Boolean,json:{write:!0}})],t.prototype,"returnDistinctValues",void 0),e([n($,{name:"spatialRel"})],t.prototype,"spatialRelationship",void 0),e([r({type:h,json:{write:!0}})],t.prototype,"timeExtent",void 0),e([r({type:String,json:{write:!0}})],t.prototype,"upperBoundaryAlias",void 0),e([r({type:String,json:{read:a.read,write:{writer:a.write,overridePolicy(i){return{enabled:i!=null&&this.distance!=null}}}}})],t.prototype,"units",void 0),e([r({type:String,json:{write:!0}})],t.prototype,"where",void 0),t=e([m("esri.rest.support.AttributeBinsQuery")],t),t.from=y(t);export{t as default};
