import{v as l,r as a,m as y,a as d,I as f,bA as g}from"./CtNvT6K6.js";import{i as v}from"./Bxh34c20.js";import{i as w}from"./DcLUNRaC.js";import{f as I,u as S,s as $}from"./BgJlXcGt.js";import"./ZGrc7RNF.js";import{d as j}from"./zKISfSWW.js";let n=class extends l{constructor(e){super(e),this.associations=[]}};a([y({type:[j],json:{write:!0}})],n.prototype,"associations",void 0),n=a([d("esri.rest.networks.support.QueryAssociationsResult")],n);function J(s){const{returnDeletes:e,elements:r,gdbVersion:o,moment:i}=s.toJSON();return{returnDeletes:e,elements:JSON.stringify(r.map((t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId})))),types:JSON.stringify(s.types.map((t=>w.toJSON(t)))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:o,moment:i??Date.now()}}async function D(s,e,r){const o=I(s),i={...J(e),f:"json"},t=S({...o.query,...i}),c=$(t,{...r,method:"post"}),p=`${o.path}/associations/query`,{data:u}=await f(p,c),m=n.fromJSON(u);return e.types.includes("connectivity")&&g(v.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://arcg.is/11Tr8a#types",version:"4.29",warnOnce:!0}),m}export{D as queryAssociations};
