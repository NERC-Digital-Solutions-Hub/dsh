import{k as F,v as N,r as h,m as d,p as G,o as z,a as S}from"./iFuBOtDF.js";import{d as T,l as P}from"./BkA6azLD.js";import{a as j}from"./DHq0rblm.js";import"./BfhsIlKo.js";import{f as v}from"./pCx8oau_.js";import{f as q,y as x}from"./BPhm6YV-.js";import{m as J}from"./ok2Sqpw2.js";var R;const w=new N({esriGeometryPoint:"point",esriGeometryMultipoint:"multipoint",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"extent",mesh:"mesh","":null});let c=R=class extends F{constructor(o){super(o),this.displayFieldName=null,this.exceededTransferLimit=!1,this.features=[],this.fields=null,this.geometryType=null,this.hasM=!1,this.hasZ=!1,this.queryGeometry=null,this.spatialReference=null}readFeatures(o,l){return this.readFeaturesWithClass(o,l,T)}writeGeometryType(o,l,n,e){if(o)return void w.write(o,l,n,e);const{features:s}=this;if(s){for(const r of s)if(r?.geometry!=null)return void w.write(r.geometry.type,l,n,e)}}readQueryGeometry(o,l){if(!o)return null;const n=!!o.spatialReference,e=q(o);return e&&!n&&l.spatialReference&&(e.spatialReference=v.fromJSON(l.spatialReference)),e}writeSpatialReference(o,l){if(o)return void(l.spatialReference=o.toJSON());const{features:n}=this;if(n){for(const e of n)if(e&&e.geometry!=null&&e.geometry.spatialReference)return void(l.spatialReference=e.geometry.spatialReference.toJSON())}}clone(){return new R(this.cloneProperties())}cloneProperties(){return j({displayFieldName:this.displayFieldName,exceededTransferLimit:this.exceededTransferLimit,features:this.features,fields:this.fields,geometryType:this.geometryType,hasM:this.hasM,hasZ:this.hasZ,queryGeometry:this.queryGeometry,spatialReference:this.spatialReference,transform:this.transform})}toJSON(o){const l=this.write();if(l.features&&Array.isArray(o)&&o.length>0)for(let n=0;n<l.features.length;n++){const e=l.features[n];if(e.geometry){const s=o?.[n];e.geometry=s?.toJSON()||e.geometry}}return l}quantize(o){const{scale:[l,n],translate:[e,s]}=o,r=t=>Math.round((t-e)/l),a=t=>Math.round((s-t)/n),y=this.features,m=this._getQuantizationFunction(this.geometryType,r,a);for(let t=0,u=y.length;t<u;t++)m?.(y[t].geometry)||(y.splice(t,1),t--,u--);return this.transform=o,this}unquantize(){const{geometryType:o,features:l,transform:n}=this;if(!n)return this;const{translate:[e,s],scale:[r,a]}=n,y=p=>p*r+e,m=p=>s-p*a;let t=null,u=null;if(this.hasZ&&n?.scale?.[2]!=null){const{translate:[,,p],scale:[,,g]}=n;t=f=>f*g+p}if(this.hasM&&n?.scale?.[3]!=null){const{translate:[,,,p],scale:[,,,g]}=n;u=f=>f==null?f:f*g+p}const i=this._getHydrationFunction(o,y,m,t,u);for(const{geometry:p}of l)p!=null&&i&&i(p);return this.transform=null,this}readFeaturesWithClass(o,l,n){const e=v.fromJSON(l.spatialReference),s=[];for(let r=0;r<o.length;r++){const a=o[r],y=n.fromJSON(a),m=a.geometry?.spatialReference;y.geometry==null||m||(y.geometry.spatialReference=e);const t=a.aggregateGeometries,u=y.aggregateGeometries;if(t&&u!=null)for(const i in u){const p=u[i],g=t[i],f=g?.spatialReference;p==null||f||(p.spatialReference=e)}s.push(y)}return s}_quantizePoints(o,l,n){let e,s;const r=[];for(let a=0,y=o.length;a<y;a++){const m=o[a];if(a>0){const t=l(m[0]),u=n(m[1]);t===e&&u===s||(r.push([t-e,u-s]),e=t,s=u)}else e=l(m[0]),s=n(m[1]),r.push([e,s])}return r.length>0?r:null}_getQuantizationFunction(o,l,n){return o==="point"?e=>(e.x=l(e.x),e.y=n(e.y),e):o==="polyline"||o==="polygon"?e=>{const s=x(e)?e.rings:e.paths,r=[];for(let a=0,y=s.length;a<y;a++){const m=s[a],t=this._quantizePoints(m,l,n);t&&r.push(t)}return r.length>0?(x(e)?e.rings=r:e.paths=r,e):null}:o==="multipoint"?e=>{const s=this._quantizePoints(e.points,l,n);return s&&s.length>0?(e.points=s,e):null}:o==="extent"?e=>e:null}_getHydrationFunction(o,l,n,e,s){return o==="point"?r=>{r.x=l(r.x),r.y=n(r.y),e&&(r.z=e(r.z))}:o==="polyline"||o==="polygon"?r=>{const a=x(r)?r.rings:r.paths;let y,m;for(let t=0,u=a.length;t<u;t++){const i=a[t];for(let p=0,g=i.length;p<g;p++){const f=i[p];p>0?(y+=f[0],m+=f[1]):(y=f[0],m=f[1]),f[0]=l(y),f[1]=n(m)}}if(e&&s)for(let t=0,u=a.length;t<u;t++){const i=a[t];for(let p=0,g=i.length;p<g;p++){const f=i[p];f[2]=e(f[2]),f[3]=s(f[3])}}else if(e)for(let t=0,u=a.length;t<u;t++){const i=a[t];for(let p=0,g=i.length;p<g;p++){const f=i[p];f[2]=e(f[2])}}else if(s)for(let t=0,u=a.length;t<u;t++){const i=a[t];for(let p=0,g=i.length;p<g;p++){const f=i[p];f[2]=s(f[2])}}}:o==="extent"?r=>{r.xmin=l(r.xmin),r.ymin=n(r.ymin),r.xmax=l(r.xmax),r.ymax=n(r.ymax),e&&r.zmax!=null&&r.zmin!=null&&(r.zmax=e(r.zmax),r.zmin=e(r.zmin)),s&&r.mmax!=null&&r.mmin!=null&&(r.mmax=s(r.mmax),r.mmin=s(r.mmin))}:o==="multipoint"?r=>{const a=r.points;let y,m;for(let t=0,u=a.length;t<u;t++){const i=a[t];t>0?(y+=i[0],m+=i[1]):(y=i[0],m=i[1]),i[0]=l(y),i[1]=n(m)}if(e&&s)for(let t=0,u=a.length;t<u;t++){const i=a[t];i[2]=e(i[2]),i[3]=s(i[3])}else if(e)for(let t=0,u=a.length;t<u;t++){const i=a[t];i[2]=e(i[2])}else if(s)for(let t=0,u=a.length;t<u;t++){const i=a[t];i[2]=s(i[2])}}:null}};h([d({type:String,json:{write:!0}})],c.prototype,"displayFieldName",void 0),h([d({type:Boolean,json:{write:{overridePolicy:o=>({enabled:o})}}})],c.prototype,"exceededTransferLimit",void 0),h([d({type:[T],json:{write:!0}})],c.prototype,"features",void 0),h([G("features")],c.prototype,"readFeatures",null),h([d({type:[J],json:{write:!0}})],c.prototype,"fields",void 0),h([d({type:["point","multipoint","polyline","polygon","extent","mesh"],json:{read:{reader:w.read}}})],c.prototype,"geometryType",void 0),h([z("geometryType")],c.prototype,"writeGeometryType",null),h([d({type:Boolean,json:{write:{overridePolicy:o=>({enabled:o})}}})],c.prototype,"hasM",void 0),h([d({type:Boolean,json:{write:{overridePolicy:o=>({enabled:o})}}})],c.prototype,"hasZ",void 0),h([d({types:P,json:{write:!0}})],c.prototype,"queryGeometry",void 0),h([G("queryGeometry")],c.prototype,"readQueryGeometry",null),h([d({type:v,json:{write:!0}})],c.prototype,"spatialReference",void 0),h([z("spatialReference")],c.prototype,"writeSpatialReference",null),h([d({json:{write:!0}})],c.prototype,"transform",void 0),c=R=h([S("esri.rest.support.FeatureSet")],c),c.prototype.toJSON.isDefaultToJSON=!0;export{c as g};
