import{q as n,I as p,aM as y,r as o,m as i,E as u,z as m,a as d}from"./CtNvT6K6.js";import{s as h}from"./ZGrc7RNF.js";import{S as c}from"./zJBfbJr0.js";import{q as f}from"./Bxh34c20.js";import{h as S}from"./BH0Bspy2.js";import{p as g}from"./DKOtFXHN.js";import{b as v,u as b,d as C,y as G}from"./BhOl2jZS.js";import{j as P}from"./vHs3zAuM.js";import{f as _}from"./38UHp5wA.js";import{t as w}from"./wL_6Pln_.js";import{m as x,c as a,u as R,b as $,a as k}from"./BAgzJ9Eh.js";const j=["atom","xml"],E={base:a,key:"type",typeMap:{"simple-line":x},errorContext:"symbol"},F={base:a,key:"type",typeMap:{"picture-marker":$,"simple-marker":R},errorContext:"symbol"},M={base:a,key:"type",typeMap:{"simple-fill":k},errorContext:"symbol"};let t=class extends g(_(v(P(w(c(S)))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}readFeatureCollections(e,r){return r.featureCollection.layers.forEach((s=>{const l=s.layerDefinition.drawingInfo.renderer.symbol;l&&l.type==="esriSFS"&&l.outline?.style.includes("esriSFS")&&(l.outline.style="esriSLSSolid")})),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&this.originOf("title")!=="defaults"?e:this.url?f(this.url,j)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n).then((()=>this._fetchService(r))).then((s=>{this.read(s,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const r=this.spatialReference,{data:s}=await p(h.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:y(r)?void 0:r.wkid??JSON.stringify(r)},signal:e});return s}_hasGeometry(e){return this.featureCollections?.some((r=>r.featureSet?.geometryType===e&&r.featureSet.features?.length>0))??!1}};o([i()],t.prototype,"description",void 0),o([i()],t.prototype,"featureCollections",void 0),o([u("service","featureCollections",["featureCollection.layers"])],t.prototype,"readFeatureCollections",null),o([i({type:m,json:{name:"lookAtExtent"}})],t.prototype,"fullExtent",void 0),o([i(b)],t.prototype,"id",void 0),o([i(C)],t.prototype,"legendEnabled",void 0),o([i({types:E,json:{write:!0}})],t.prototype,"lineSymbol",void 0),o([i({type:["show","hide"]})],t.prototype,"listMode",void 0),o([i({types:F,json:{write:!0}})],t.prototype,"pointSymbol",void 0),o([i({types:M,json:{write:!0}})],t.prototype,"polygonSymbol",void 0),o([i({type:["GeoRSS"]})],t.prototype,"operationalLayerType",void 0),o([i(G)],t.prototype,"url",void 0),o([i({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],t.prototype,"title",null),o([i({readOnly:!0,json:{read:!1},value:"geo-rss"})],t.prototype,"type",void 0),t=o([d("esri.layers.GeoRSSLayer")],t);const U=t;export{U as default};
