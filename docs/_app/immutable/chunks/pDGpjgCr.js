const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./DLPLD50Y.js","./B5jfOAyC.js","./DsnmJJEf.js","./qhGSfr8s.js","./CYgEQTyb.js","./CUmkdNFk.js","./BfrHREwz.js","./DwntN76J.js","./tQNujLrX.js","./D7vOUhHr.js","./CSLnW4Ur.js","./laJq_Y7H.js","../assets/4.BILSy67e.css","./CuRwVAON.js","./DN4JvB0T.js","./YlRvECMU.js","./Bf7UDgaK.js","./IsMQoFqb.js","./C2Yj7m4f.js","./CDKyemvT.js"])))=>i.map(i=>d[i]);
import{_ as Z}from"./D7vOUhHr.js";import{k as H,r,m as a,a as b,e as G,a_ as B,p as K,_ as Q,a2 as V,bk as y,b4 as N}from"./IsMQoFqb.js";import{d as X}from"./CI01Hkb3.js";import{t as Y}from"./DmxaQ-k8.js";import{l as g,U as W,h as S,a as ee,w as R}from"./BeCrDXwC.js";import{r as te}from"./CDKyemvT.js";import{B as ie,L}from"./B5jfOAyC.js";import{h as q}from"./D0VFq2iV.js";import{V as se,p as re}from"./BMtnoABP.js";import{y as ne}from"./C9J8ifYQ.js";import{t as C}from"./DZd6gJy7.js";import{o as oe}from"./6mrhY1Wt.js";import{n as ae,B as j,k as le,e as de}from"./C2Yj7m4f.js";import{g as ue,t as he,W as pe}from"./BOoctOtb.js";import{r as ce}from"./CdKLiZ36.js";import{h as ye}from"./DQGr4mjc.js";import{o as fe,i as ge}from"./fxGkSzor.js";import{P as we}from"./BJ84funn.js";import{l as M}from"./FHALfejr.js";import{d as A,y as _e}from"./C9DMOVB5.js";import{j as me,q as ve,r as Se,y as be,s as Ie,g as Oe}from"./CQ535oPP.js";import{a as He}from"./RDSvH8q8.js";import{h as ke}from"./CGwAYP59.js";import{e as $e}from"./CV4_4Smu.js";import{j as Te,l as Fe}from"./D_qBkDOT.js";import{E as Pe}from"./y9G7uBIH.js";function P(e,t){return he(t.extent,U),ue(U,oe(Me,e.x,e.y,0))}const U=pe(),Me=ae();let f=class extends H{get tiles(){const e=this.tilesCoveringView,t=this.pointOfInterest!=null?this.pointOfInterest:this.view.center;return e.sort(((i,n)=>P(t,i)-P(t,n))),e}_scaleEnabled(){return ce(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||this.tileInfo==null)return[];if(!this._scaleEnabled)return[];const{spans:e,lodInfo:t}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:i}=t,n=[];for(const{row:s,colFrom:o,colTo:l}of e)for(let u=o;u<=l;u++){const _=t.normalizeCol(u),p=new C(null,i,s,_);this.tileInfo.updateTileInfo(p),n.push(p)}return n}get tileInfo(){return this.view.featuresTilingScheme?.tileInfo??null}get tileSize(){return this.tileInfo!=null?this.tileInfo.size[0]:256}constructor(e){super(e),this.pointOfInterest=null}initialize(){this.addHandles(g((()=>this.view?.state?.viewpoint),(()=>this.notifyChange("tilesCoveringView")),W))}};r([a({readOnly:!0})],f.prototype,"tiles",null),r([a({readOnly:!0})],f.prototype,"_scaleEnabled",null),r([a({readOnly:!0})],f.prototype,"tilesCoveringView",null),r([a({readOnly:!0})],f.prototype,"tileInfo",null),r([a({readOnly:!0})],f.prototype,"tileSize",null),r([a({constructOnly:!0})],f.prototype,"view",void 0),r([a({constructOnly:!0})],f.prototype,"layer",void 0),r([a()],f.prototype,"pointOfInterest",void 0),f=r([b("esri.views.2d.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],f);let w=class extends H{get _sortedTilesCoveringView(){const t=(this.view.featureTiles?.tiles?.toArray()??[]).map(Ce),i=this._effectivePointOfInterest;return i!=null&&t.sort(((n,s)=>P(i,n)-P(i,s))),t}get tileInfo(){return this.view.featureTiles?.tilingScheme?.toTileInfo()??null}get tileSize(){return this.view.featureTiles?.tileSize??256}get _effectivePointOfInterest(){const t=this.pointOfInterest;return t??this.view.pointsOfInterest?.focus.location}constructor(t){super(t),this.tiles=[],this.pointOfInterest=null}initialize(){this.addHandles([g((()=>this.view.featureTiles),(t=>{this.removeHandles(D),t&&this.addHandles(t.addClient(),D)}),S),g((()=>this._sortedTilesCoveringView),(t=>this._set("tiles",t)),{initial:!0,equals:(t,i)=>ie(t,i,((n,s)=>n.id===s.id))})])}};function Ce({lij:[e,t,i],extent:n}){return new C(`${e}/${t}/${i}`,e,t,i,n)}r([a({readOnly:!0})],w.prototype,"tiles",void 0),r([a({readOnly:!0})],w.prototype,"_sortedTilesCoveringView",null),r([a({readOnly:!0})],w.prototype,"tileInfo",null),r([a({readOnly:!0})],w.prototype,"tileSize",null),r([a({constructOnly:!0})],w.prototype,"view",void 0),r([a()],w.prototype,"pointOfInterest",void 0),r([a()],w.prototype,"_effectivePointOfInterest",null),w=r([b("esri.views.3d.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],w);const D="feature-tiles",Ee=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let O=class extends H{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._symbols=Ee.map((t=>new He({color:[t[0],t[1],t[2],.6],outline:{color:"black",width:1}}))),this._enabled=!0}initialize(){this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=o=>{if(o.label!=null)return o.label;let l=o.lij.toString();return o.loadPriority!=null&&(l+=` (${o.loadPriority})`),o.measures&&(l+=`[${o.measures.lodLevel}]`),l},t=this.getTiles(),i=new Array,n=new Set((this._labels.size,this._labels.keys()));t.forEach(((o,l)=>{const u=o.lij.toString();n.delete(u);const _=o.measures?.lodLevel??o.level,p=o.geometry;if(this.enablePolygons&&!this._polygons.has(u)){const d=new A({geometry:p,symbol:this._symbols[_%this._symbols.length]});this._polygons.set(u,d),i.push(d)}if(this.enableLabels){const d=e(o),m=l/(t.length-1),I=j(0,200,m),k=j(20,6,m)/.75,E=o.loadPriority!=null&&o.loadPriority>=t.length,z=new M([I,E?0:I,E?0:I]),x=this.view.type==="3d"?()=>new me({verticalOffset:new Se({screenLength:40/.75}),callout:new ve({color:new M("white"),border:new Ie({color:new M("black")})}),symbolLayers:new se([new be({text:d,halo:{color:"white",size:1/.75},material:{color:z},size:k})])}):()=>new Oe({text:d,haloColor:"white",haloSize:1/.75,color:z,size:k}),T=this._labels.get(u);if(T){const $=x();T.symbol!=null&&JSON.stringify($)===JSON.stringify(T.symbol)||(T.symbol=$)}else{const $=new A({geometry:p.extent.center,symbol:x()});this._labels.set(u,$),i.push($)}}}));const s=new Array;n.forEach((o=>{const l=this._polygons.get(o);l!=null&&(s.push(l),this._polygons.delete(o));const u=this._labels.get(o);u!=null&&(s.push(u),this._labels.delete(o))})),this.view.graphics.removeMany(s),this.view.graphics.addMany(i)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};r([a({constructOnly:!0})],O.prototype,"view",void 0),r([a({readOnly:!0})],O.prototype,"updating",void 0),r([a()],O.prototype,"enabled",null),O=r([b("esri.views.support.TileTreeDebugger")],O);let F=class extends O{constructor(e){super(e)}initialize(){const e=setInterval((()=>this._fetchDebugInfo()),2e3);this.addHandles(G((()=>clearInterval(e))))}getTiles(){if(!this._debugInfo)return[];const e=new Map,t=new Map;this._debugInfo.storedTiles.forEach((s=>{e.set(s.data.id,s.featureCount)})),this._debugInfo.pendingTiles.forEach((s=>{e.set(s.data.id,s.featureCount),t.set(s.data.id,s.state)}));const i=s=>{const o=t.get(s),l=e.get(s)??"?";return o?`${o}:${l}
${s}`:`store:${l}
${s}`},n=new Map;return this._debugInfo.storedTiles.forEach((s=>{n.set(s.data.id,s.data)})),this._debugInfo.pendingTiles.forEach((s=>{n.set(s.data.id,s.data)})),Array.from(n.values()).map((s=>({lij:[s.level,s.row,s.col],level:s.level,geometry:we.fromExtent(le(s.extent,this.view.spatialReference)),label:i(s.id)})))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then((e=>{this._debugInfo=e,this.update()}))}};r([a({constructOnly:!0})],F.prototype,"handle",void 0),F=r([b("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],F);let c=class extends H{get updating(){return this._updatingHandles.updating||this._workerHandleUpdating}constructor(e){super(e),this._updatingHandles=new q,this._suspendController=null,this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async t=>{const i=[];for(const{points:n}of t.pointsInFeatures)for(const{z:s}of n)i.push(s);return{elevations:i,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this.updateOutFields=B((async(t,i)=>{await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateOutFields",[...t],i)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},i))}))}destroy(){this._suspendController=K(this._suspendController),this._workerHandle.destroy(),this._updatingHandles.destroy()}initialize(){this._workerHandle=new xe(this.schedule,{alignElevation:async(e,{signal:t})=>({result:await this.elevationAlignPointsInFeatures(e.query,t)}),getSymbologyCandidates:async(e,{signal:t})=>({result:await this.queryForSymbologySnapping(e,t)})}),this.addHandles([this._workerHandle.on("notify-updating",(({updating:e})=>this._workerHandleUpdating=e)),this._workerHandle.on("notify-availability",(({availability:e})=>this._set("availability",e)))])}async setup(e,t){const i=ze(e.layer);if(i==null)return;const n={configuration:J(e.configuration),serviceInfo:i,spatialReference:e.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:e.layer.elevationInfo?.toJSON()};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",n,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async configure(e,t){const i=J(e);await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",i,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async refresh(e){await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},e)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async fetchCandidates(e,t){const{point:i,filter:n,coordinateHelper:s}=e,o={...e,point:$e(i[0],i[1],i[2],s.spatialReference.toJSON()),filter:n?.toJSON()};return this._workerHandle.invoke(o,t)}async updateTiles(e,t){const i={tiles:e.tiles,tileInfo:e.tileInfo!=null?e.tileInfo.toJSON():null,tileSize:e.tileSize};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",i,t)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async handleEdits({historicMoment:e,addedFeatures:t,deletedFeatures:i,updatedFeatures:n},s){const o={historicMoment:e,addedFeatures:t?.map((({objectId:l})=>l)).filter(L)??[],deletedFeatures:i?.map((({objectId:l,globalId:u})=>({objectId:l,globalId:u})))??[],updatedFeatures:n?.map((({objectId:l})=>l)).filter(L)??[]};await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("handleEdits",o,s)),this._updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},s))}async setHistoricMoment(e,t){await this._updatingHandles.addPromise(this._workerHandle.invokeMethod("setHistoricMoment",{moment:e},t))}getDebugInfo(e){return this._workerHandle.invokeMethod("getDebugInfo",{},e)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(e){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",e)}async setSuspended(e){this._suspendController?.abort(),this._suspendController=new AbortController,await this._workerHandle.invokeMethod("setSuspended",e,this._suspendController.signal)}};function J(e){return{filter:e.filter!=null?e.filter.toJSON():null,customParameters:e.customParameters,viewType:e.viewType}}function ze(e){return e.geometryType==="multipatch"||e.geometryType==="mesh"?null:{url:e.parsedUrl?.path??"",fieldsIndex:e.fieldsIndex.toJSON(),geometryType:_e.toJSON(e.geometryType),capabilities:e.capabilities,objectIdField:e.objectIdField,globalIdField:e.globalIdField,spatialReference:e.spatialReference.toJSON(),timeInfo:e.timeInfo?.toJSON()}}r([a({constructOnly:!0})],c.prototype,"schedule",void 0),r([a({constructOnly:!0})],c.prototype,"hasZ",void 0),r([a({constructOnly:!0})],c.prototype,"elevationAlignPointsInFeatures",void 0),r([a({constructOnly:!0})],c.prototype,"queryForSymbologySnapping",void 0),r([a({readOnly:!0})],c.prototype,"updating",null),r([a({readOnly:!0})],c.prototype,"availability",void 0),r([a()],c.prototype,"_workerHandleUpdating",void 0),c=r([b("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],c);class xe extends ke{constructor(t,i){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:i})}}let v=class extends H{get tiles(){return[new C("0/0/0",0,0,0,de(-1e8,-1e8,1e8,1e8))]}get tileInfo(){return new Te({origin:new Q({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new Fe({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}constructor(e){super(e),this.pointOfInterest=null}};r([a({readOnly:!0})],v.prototype,"tiles",null),r([a({readOnly:!0})],v.prototype,"tileInfo",null),r([a({readOnly:!0})],v.prototype,"tileSize",null),r([a({constructOnly:!0})],v.prototype,"layer",void 0),r([a()],v.prototype,"pointOfInterest",void 0),v=r([b("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],v);let h=class extends H{get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get _layerView(){return this.view?.allLayerViews.find((e=>e.layer===this._layer))}get _isSuspended(){return re(this._layer)&&!this.layerSource.sublayerSources.some((e=>e.enabled&&e.layer.visible))?!0:!!this.view&&(this._layerView?.suspended!==!1||!this.layerSource.enabled)}get updating(){return this._workerHandle?.updating||this._updatingHandles.updating}get _outFields(){const{view:e,_layerView:t,layerSource:i}=this,{layer:n}=i,{fieldsIndex:s,timeInfo:o,floorInfo:l,subtypeField:u}=n,_=t&&"filter"in t?t.filter:null,p=_?.where&&_.where!=="1=1"?this._getOrLoadWhereFields(_.where,s):[];if(_?.timeExtent&&o){const{startField:d,endField:m}=o,I=s.get(d)?.name??d,k=s.get(m)?.name??m;I&&p.push(I),k&&p.push(k)}if(e?.map&&ye(e.map)&&e.map.utilityNetworks?.find((d=>d.isUtilityLayer(n)))){const d=n.fieldsIndex.get("assetGroup")?.name,m=n.fieldsIndex.get("assetType")?.name;d&&m&&(p.push(d),p.push(m))}if(n&&l?.floorField&&e?.floors?.length){const d=s.get(l.floorField)?.name??l.floorField;d&&p.push(d)}if(u){const d=s.get(u)?.name??u;d&&p.push(d)}return new Set(p)}get configuration(){const{view:e}=this,{apiKey:t,customParameters:i}=this._layer,n=e!=null?e.type:"2d",s=this._layer.createQuery();return this._layerView&&"effectiveDisplayFilter"in this._layerView&&(s.where=te(s.where,this._layerView.effectiveDisplayFilter?.where)),{filter:s,customParameters:t?{...i,token:t}:i,viewType:n}}get availability(){return this._workerHandle?.availability??0}get _layer(){return this.layerSource.layer}constructor(e){super(e),this._updatingHandles=new q,this._workerHandle=null,this._debug=null,this._memoizedMakeGetGroundElevation=Y(ge)}initialize(){let e;const t=this.view;if(t==null||t.destroyed)this._tilesOfInterest=new v({layer:this._layer}),e=this._workerHandle=new c;else switch(t.type){case"2d":this._tilesOfInterest=new f({view:t,layer:this._layer}),e=this._workerHandle=new c;break;case"3d":{const{resourceController:i}=t,n=this._layer;this._tilesOfInterest=new w({view:t}),e=this._workerHandle=new c({schedule:s=>i.immediate.schedule(s),hasZ:this._layer.hasZ&&(this._layer.returnZ??!0),elevationAlignPointsInFeatures:async(s,o)=>{const l=await t.whenLayerView(n);return V(o),l.elevationAlignPointsInFeatures(s,o)},queryForSymbologySnapping:async(s,o)=>{const l=await t.whenLayerView(n);return V(o),l.queryForSymbologySnapping(s,o)}}),this.addHandles([t.elevationProvider.on("elevation-change",(({context:s})=>{const{elevationInfo:o}=n;ne(s,o)&&y(e.notifyElevationSourceChange())})),g((()=>n.elevationInfo),(()=>y(e.notifyElevationSourceChange())),S),g((()=>this._layerView?.layer?.renderer),(()=>y(e.notifySymbologyChange())),S),g((()=>this._layerView?.symbologySnappingSupported??!1),(s=>y(e.setSymbologySnappingSupported(s))),S),ee((()=>this._layerView?.layer),["edits","apply-edits","graphic-update"],(()=>e.notifySymbologyChange()))]);break}}this.addHandles([N(e)]),y(e.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null)),this._updatingHandles.add((()=>this._updateTilesParameters),(()=>y(e.updateTiles(this._updateTilesParameters,null))),S),this.addHandles([g((()=>this.configuration),(i=>y(e.configure(i,null))),W),g((()=>this._layer.historicMoment),(i=>y(e.setHistoricMoment(i))),R),g((()=>this._outFields),(i=>y(e.updateOutFields(i))),S),g((()=>this._isSuspended),(i=>y(e.setSuspended(i))),R)]),t!=null&&this.addHandles(g((()=>Pe.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES),(i=>{i&&!this._debug?(this._debug=new F({view:t,handle:e}),this.addHandles(N(this._debug),"debug")):!i&&this._debug&&this.removeHandles("debug")}),S)),this.addHandles([this.layerSource.layer.on("edits",(i=>y(e.handleEdits(i,null)))),this.layerSource.layer.on("apply-edits",(i=>this._updatingHandles.addPromise(i.result)))])}destroy(){this._updatingHandles.destroy(),this._tilesOfInterest.destroy()}refresh(){this._workerHandle?.refresh(null)}async fetchCandidates(e,t){const{coordinateHelper:i,point:n}=e;this._tilesOfInterest.pointOfInterest=i.arrayToPoint(n);const s=this._memoizedMakeGetGroundElevation(this.view,i.spatialReference);return(await this._workerHandle.fetchCandidates({...e},t)).candidates.map((o=>fe(o,s)))}getDebugInfo(e){return this._workerHandle.getDebugInfo(e)}_getOrLoadWhereFields(e,t){const{_whereModule:i}=this;if(!this._loadWhereModuleTask&&!i){const n=X((async()=>{const s=await Z(()=>import("./DLPLD50Y.js").then(o=>o.W),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]),import.meta.url);return this._whereModule=s.default,this._whereModule}));return this._loadWhereModuleTask=n,this._updatingHandles.addPromise(n.promise),[]}if(!i)return[];try{return i.create(e,{fieldsIndex:t}).fieldNames}catch{return[]}}};r([a({constructOnly:!0})],h.prototype,"spatialReference",void 0),r([a({constructOnly:!0})],h.prototype,"layerSource",void 0),r([a({constructOnly:!0})],h.prototype,"view",void 0),r([a()],h.prototype,"_tilesOfInterest",void 0),r([a({readOnly:!0})],h.prototype,"_updateTilesParameters",null),r([a()],h.prototype,"_layerView",null),r([a()],h.prototype,"_isSuspended",null),r([a({readOnly:!0})],h.prototype,"updating",null),r([a()],h.prototype,"_outFields",null),r([a({readOnly:!0})],h.prototype,"configuration",null),r([a({readOnly:!0})],h.prototype,"availability",null),r([a()],h.prototype,"_loadWhereModuleTask",void 0),r([a()],h.prototype,"_whereModule",void 0),h=r([b("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],h);export{h as FeatureServiceSnappingSource};
