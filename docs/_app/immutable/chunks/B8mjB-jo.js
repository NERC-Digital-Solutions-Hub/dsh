import{u as j}from"./DQOJ18NT.js";import{o as X,i as Y,M as J,f as V,h as Z}from"./DKpmsPfl.js";import{e as tt,m as et}from"./DG0mXvLh.js";import{r as ot}from"./CaVKkSa6.js";import{r as st}from"./WCVSSNPR.js";import{L as rt}from"./C7qgEEUz.js";import{a as r,bW as G,R as it,ak as at}from"./DX5R6uCF.js";import{E as nt}from"./D48ZHe1M.js";import{n as pt}from"./Bm-gqKay.js";import{o as dt}from"./D01Zrs0b.js";import{t as L}from"./ehcGqGxa.js";import{j as ht,_ as E,y as lt,X as ut,c as x,e as ct,d as ft,w as mt,f as U,g as n,r as vt,U as yt,m as W,i as wt,P as N,v as xt,t as gt}from"./DSTeK77k.js";import{e as _t}from"./pk2C5RYg.js";import{D as P,C as Mt,R as St,O as q}from"./BiphejqT.js";import{t as B}from"./BLyltQyJ.js";class C extends wt{}r([U(0,x)],C.prototype,"pos",void 0),r([U(1,x)],C.prototype,"uv",void 0);class $t extends xt{}class k extends N{}r([n(vt)],k.prototype,"dvs",void 0);class v extends N{}r([n(x)],v.prototype,"perspective",void 0),r([n(x)],v.prototype,"texSize",void 0),r([n(E)],v.prototype,"wrapAroundShift",void 0),r([n(E)],v.prototype,"opacity",void 0),r([n(yt)],v.prototype,"texture",void 0);class w extends ht{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),o=new E(1).add(lt(t,this.config.perspective)),s=new ut(e.pos.add(new x(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(s);return{uv:t,glPosition:new ct(i.xy.multiply(o),0,o)}}fragment(e){const t=ft(this.config.texture,e.uv).multiply(this.config.opacity),o=new mt;return o.fragColor=t,o}}r([n(k)],w.prototype,"transform",void 0),r([n(v)],w.prototype,"config",void 0),r([G(0,W(C))],w.prototype,"vertex",null),r([G(0,W($t))],w.prototype,"fragment",null);class bt extends gt{constructor(){super(...arguments),this.type=_t.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:o,painter:s}=e,i=this._getMesh(e,t);s.setPipelineState(L);const{isWrapAround:p,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};s.setPipelineState({...L,stencil:{write:!1,test:{compare:Mt.EQUAL,op:{fail:P.KEEP,zFail:P.KEEP,zPass:P.REPLACE},ref:0,mask:255}}}),s.submitDrawMeshUntyped(o,f,i),p&&(c.wrapAroundShift=u,s.submitDrawMeshUntyped(o,f,i))}shutdown(){it(this._mesh)}_getMesh(e,t){const{context:o}=e;if(this._mesh){const s=this._mesh.vertexBuffers.get("positions");if(!s)throw new Error("Buffer not found");s.buffer.setData(t.position)}else{const s=t.index!=null?t.index.length:t.position.length/2;this._mesh=new dt(o,{vertex:{positions:{data:t.position,attributes:[new B("pos",2,q.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new B("uv",2,q.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:St.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:s}]})}return this._mesh}}class qt extends pt{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=tt(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==nt.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const o of this.children)o.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:o,size:s,pixelRatio:i,resolution:p,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===o)return;const g=j(u),d=i*s[0],m=i*s[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=rt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=p*d,b=p*m,a=X(this._dvsMat3);Y(a,a,f),J(a,a,ot(d/2,m/2)),V(a,a,st(d/$,-m/b,1)),Z(a,a,-g),this._viewStateId=o}_updateOverlays(e,t){const{state:o}=e,{rotation:s,spatialReference:i,worldScreenWidth:p,size:u,viewpoint:c}=o,f=this._localOrigin;let g,d=0;const m=at(i);if(m&&i.isWrappable){const y=u[0],S=u[1],_=j(s),$=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*$+S*b),[D,T]=m.valid,h=et(i),{x:z,y:F}=c.targetGeometry,K=[z,F],R=[0,0];o.toScreen(R,K);const M=[0,0];let O;O=a>p?.5*p:.5*a;const I=Math.floor((z+.5*h)/h),H=D+I*h,Q=T+I*h,A=[R[0]+O,0];o.toMap(M,A),M[0]>Q&&(d=h),A[0]=R[0]-O,o.toMap(M,A),M[0]<H&&(d=-h),g={worldWidth:h,xBounds:[D,T]}}for(const y of t)y.updateDrawCoords(f,d,o,g)}}export{qt as u};
