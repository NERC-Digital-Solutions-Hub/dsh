import{p as v,H as u,a as j}from"./CVNciJfy.js";import{s as c}from"./BfhsIlKo.js";import{j as f}from"./DtUpcSZL.js";import{C as $}from"./wXBmGVea.js";import w from"./AqoYAsfW.js";async function P(r,n){const t=v(r);if(!t)throw new c("invalid-url","Invalid scene service url");const e={...n,sceneServerUrl:t.url.path,layerId:t.sublayer??void 0};if(e.sceneLayerItem??=await D(e),e.sceneLayerItem==null)return p(e.sceneServerUrl.replace("/SceneServer","/FeatureServer"),e);const a=await T(e);if(!a?.url)throw new c("related-service-not-found","Could not find feature service through portal item relationship");e.featureServiceItem=a;const i=await p(a.url,e);return i.portalItem=a,i}async function D(r){const n=(await h(r)).serviceItemId;if(!n)return null;const t=new w({id:n,apiKey:r.apiKey}),e=await A(r);e!=null&&(t.portal=new $({url:e}));try{return await t.load({signal:r.signal})}catch(a){return f(a),null}}async function h(r){if(r.rootDocument)return r.rootDocument;const n={query:{f:"json",...r.customParameters,token:r.apiKey},responseType:"json",signal:r.signal};try{const t=await u(r.sceneServerUrl,n);r.rootDocument=t.data}catch{r.rootDocument={}}return r.rootDocument}async function A(r){const n=j?.findServerInfo(r.sceneServerUrl);if(n?.owningSystemUrl)return n.owningSystemUrl;const t=r.sceneServerUrl.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const e=(await u(t,{query:{f:"json"},responseType:"json",signal:r.signal})).data.owningSystemUrl;if(e)return e}catch(e){f(e)}return null}async function p(r,n){const t=v(r);if(!t)throw new c("invalid-feature-service-url","Invalid feature service url");const e=t.url.path,a=n.layerId;if(a==null)return{serverUrl:e};const i=h(n),y=n.featureServiceItem?await n.featureServiceItem.fetchData("json"):null,g=(y?.layers?.[0]||y?.tables?.[0])?.customParameters,m=o=>{const U={query:{f:"json",...g},responseType:"json",authMode:o,signal:n.signal};return u(e,U)},S=m("anonymous").catch((()=>m("no-prompt"))),[d,I]=await Promise.all([S,i]),l=I?.layers,s=d.data&&d.data.layers;if(!Array.isArray(s))throw new Error("expected layers array");if(Array.isArray(l)){for(let o=0;o<Math.min(l.length,s.length);o++)if(l[o].id===a)return{serverUrl:e,layerId:s[o].id}}else if(a!=null&&a<s.length)return{serverUrl:e,layerId:s[a].id};throw new Error("could not find matching associated sublayer")}async function T({sceneLayerItem:r,signal:n}){if(!r)return null;try{const t=(await r.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:n})).find((a=>a.type==="Feature Service"))||null;if(!t)return null;const e=new w({portal:t.portal,id:t.id});return await e.load(),e}catch(t){return f(t),null}}export{P as s};
