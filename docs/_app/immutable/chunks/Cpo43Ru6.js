import{g as f,r as s,m as n,a as w,a9 as C,bK as H,b1 as _,bY as E,R as x}from"./Bqd_gqra.js";import{m as v,x as I,L as $}from"./CSRfKCc0.js";import"./CgU_ym0P.js";import{h as O}from"./BDlco3bb.js";import{h as L}from"./BeKpmifi.js";import{t as p}from"./BOVlMsDt.js";import{f as V}from"./YJ06z3j8.js";import{n as b}from"./D2dZROTq.js";import{V as A}from"./eYlK6JLp.js";import{b as m,m as R}from"./BCtzk-C-.js";import{c as D}from"./CNiOfQE_.js";import{r as P}from"./BMr_7vTe.js";class j extends L{constructor(t){super("EdgeProcessingWorker","extract",{extract:r=>[r.dataBuffer],extractComponentsEdgeLocations:r=>[r.dataBuffer],extractEdgeLocations:r=>[r.dataBuffer]},t)}async process(t,r,i){return i?V(t):B(await this.invoke(new y(t),r))}async extractEdgeLocations(t,r){const i=await this.invokeMethod("extractEdgeLocations",new y(t),r);return p(i)}async extractComponentsEdgeLocations(t,r){const i=await this.invokeMethod("extractComponentsEdgeLocations",new y(t),r);return p(i)}}function B(e){return{regular:{instancesData:p(e.regular.instancesData),lodInfo:{lengths:new Float32Array(e.regular.lodInfo.lengths)}},silhouette:{instancesData:p(e.silhouette.instancesData),lodInfo:{lengths:new Float32Array(e.silhouette.lodInfo.lengths)}},averageEdgeLength:e.averageEdgeLength}}class y{constructor(t){this.dataBuffer=t.data.buffer,this.writerSettings=t.writerSettings,this.skipDeduplicate=t.skipDeduplicate,this.indices=v(t.indices)?t.indices.buffer:t.indices,this.indicesType=v(t.indices)?I(t.indices)?"Uint32Array":"Uint16Array":"Array",this.indicesLength=t.indicesLength}}let d=class extends f{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new W(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:i}=e,a=M;this.renderCoordsHelper.toRenderCoords(i,r.spatialReference,a);const u=e.distance,c=typeof u=="number"?u:u.distance,h=await this._workerHandle.invoke({bounds:A(a[0],a[1],a[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return h.candidates.sort(((g,k)=>g.distance-k.distance)),h.candidates.map((g=>this._convertCandidate(r,g)))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new D({objectId:t.objectId,targetPoint:m(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new P({objectId:t.objectId,targetPoint:m(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=b();return this.renderCoordsHelper.fromRenderCoords(t,r,e),R(r)}async _fetchAllEdgeLocations(e,t){const r=[],i=[];for(const{id:a,uid:u}of e.components)this._ids.has(a)&&r.push((async()=>{const c=await this.fetchEdgeLocations(a,t.signal),h=c.locations.buffer;return i.push(h),{id:a,uid:u,objectIds:c.objectIds,locations:h,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter((({id:a})=>this._ids.has(a)))},transferList:i}}};s([n({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),s([n({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),s([n({constructOnly:!0})],d.prototype,"schedule",void 0),s([n({readOnly:!0})],d.prototype,"availability",void 0),d=s([w("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let W=class extends L{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const M=b();let o=class extends f{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new O,this._abortController=new AbortController}destroy(){this._tracker=C(this._tracker),this._abortController=H(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new j(S(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:S(t),fetchEdgeLocations:async(r,i)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,i)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([_(this._workerHandle),_(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const e=this._abortController?.signal,t=await this.getLayerView();t==null||E(e)||(this._tracker=t.trackSnappingSources({add:(r,i)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:r,bounds:i},e))},remove:r=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:r},e))}}))}};function S(e){return t=>e.immediate.schedule(t)}s([n({constructOnly:!0})],o.prototype,"getLayerView",void 0),s([n({constructOnly:!0})],o.prototype,"view",void 0),s([n({readOnly:!0})],o.prototype,"updating",null),s([n({readOnly:!0})],o.prototype,"availability",void 0),o=s([w("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],o);let l=class extends f{get updating(){return this._i3sSources.some((e=>e.updating))}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach((e=>e.destroy())),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map((i=>i.fetchCandidates(e,t))));return x(t),r.flat()}refresh(){this._i3sSources.forEach((e=>e.refresh()))}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map((r=>r.type==="building-component"?new o({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null)).filter($)}_getSceneLayerI3SSource(e,t){return new o({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};s([n({constructOnly:!0})],l.prototype,"layerSource",void 0),s([n({constructOnly:!0})],l.prototype,"view",void 0),s([n({readOnly:!0})],l.prototype,"updating",null),s([n({readOnly:!0})],l.prototype,"availability",void 0),l=s([w("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
