import{v as m,r as n,m as a,E as u,a as g,I as y}from"./IsMQoFqb.js";import{f as b,u as j,s as U}from"./DDx-Un6v.js";import"./B5jfOAyC.js";let r=class extends m{constructor(s){super(s),this.container=null,this.ranges=null}readContainer(s,e){return{sourceId:e.sourceId,globalId:e.globalId}}readRanges(s,e){return[...e.gaps.map((t=>({firstUnit:t.start,numUnits:t.end-t.start+1,isGap:!0}))),...e.unitIdentifiers.map((t=>({firstUnit:t.firstUnit,numUnits:t.numUnits,isGap:!1,content:{sourceId:t.sourceId,globalId:t.globalId}})))]}};n([a({type:Object})],r.prototype,"container",void 0),n([u("container",["sourceId","globalId"])],r.prototype,"readContainer",null),n([a({type:[Object]})],r.prototype,"ranges",void 0),n([u("ranges",["gaps","unitIdentifiers"])],r.prototype,"readRanges",null),r=n([g("esri.rest.networks.unitIdentifiers.support.UnitQueryResult")],r);async function v(s,e,t){const o=b(s),i=e.toJSON();e.objects&&(i.objects=JSON.stringify(e.objects));const p={...i,f:"json"},d=j({...o.query,...p}),c=U(d,{...t,method:"post"}),l=`${o.path}/unitIdentifiers/query`,{data:f}=await y(l,c);return f.objects.map((I=>r.fromJSON(I)))}export{v as queryUnitIdentifiers};
