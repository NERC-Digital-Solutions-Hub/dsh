import{d as n,r as o,m as i,o as p,a as y}from"./Bcg-2HKw.js";import{s as u}from"./w-2V2ENZ.js";import{H as m,C as d,z as h}from"./Q08H8bVX.js";import{S as c}from"./CSRd2Im9.js";import{q as f}from"./BmSLGRn-.js";import"./DGjcIG0n.js";import{h as S}from"./C8xdkYGB.js";import{p as g}from"./CU4cRuwM.js";import{b as v,u as b,d as C,y as G}from"./4_P7SNww.js";import{j as P}from"./BMfd6KN8.js";import{f as _}from"./D_ONtKlR.js";import{t as w}from"./T5EHEHQk.js";import{a as x}from"./gUqpjOvZ.js";import{m as R,c as a,a as $}from"./Dt_3dexZ.js";import{u as k}from"./BJcbKF6x.js";const j=["atom","xml"],F={base:a,key:"type",typeMap:{"simple-line":R},errorContext:"symbol"},E={base:a,key:"type",typeMap:{"picture-marker":x,"simple-marker":k},errorContext:"symbol"},M={base:a,key:"type",typeMap:{"simple-fill":$},errorContext:"symbol"};let t=class extends g(_(v(P(w(c(S)))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}readFeatureCollections(e,r){return r.featureCollection.layers.forEach((s=>{const l=s.layerDefinition.drawingInfo.renderer.symbol;l&&l.type==="esriSFS"&&l.outline?.style.includes("esriSFS")&&(l.outline.style="esriSLSSolid")})),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&this.originOf("title")!=="defaults"?e:this.url?f(this.url,j)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n).then((()=>this._fetchService(r))).then((s=>{this.read(s,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const r=this.spatialReference,{data:s}=await m(u.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:d(r)?void 0:r.wkid??JSON.stringify(r)},signal:e});return s}_hasGeometry(e){return this.featureCollections?.some((r=>r.featureSet?.geometryType===e&&r.featureSet.features?.length>0))??!1}};o([i()],t.prototype,"description",void 0),o([i()],t.prototype,"featureCollections",void 0),o([p("service","featureCollections",["featureCollection.layers"])],t.prototype,"readFeatureCollections",null),o([i({type:h,json:{name:"lookAtExtent"}})],t.prototype,"fullExtent",void 0),o([i(b)],t.prototype,"id",void 0),o([i(C)],t.prototype,"legendEnabled",void 0),o([i({types:F,json:{write:!0}})],t.prototype,"lineSymbol",void 0),o([i({type:["show","hide"]})],t.prototype,"listMode",void 0),o([i({types:E,json:{write:!0}})],t.prototype,"pointSymbol",void 0),o([i({types:M,json:{write:!0}})],t.prototype,"polygonSymbol",void 0),o([i({type:["GeoRSS"]})],t.prototype,"operationalLayerType",void 0),o([i(G)],t.prototype,"url",void 0),o([i({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],t.prototype,"title",null),o([i({readOnly:!0,json:{read:!1},value:"geo-rss"})],t.prototype,"type",void 0),t=o([y("esri.layers.GeoRSSLayer")],t);const V=t;export{V as default};
