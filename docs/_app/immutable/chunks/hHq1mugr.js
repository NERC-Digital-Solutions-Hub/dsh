import{f as V,r as o,m as p,a as X}from"./Bcg-2HKw.js";import{i as Y}from"./DGjcIG0n.js";import{s as U}from"./D6KPPgz5.js";import{j as D}from"./Q08H8bVX.js";import"./w-2V2ENZ.js";import{w as E}from"./6lnTPk9w.js";import{U as j,O as F}from"./BTWTCu7M.js";import{P as W}from"./DUUco_Oc.js";import{u as H}from"./DWDMex1Z.js";import{l as I,u as T,t as _}from"./me0pNqai.js";import{f as d,d as k,c as q}from"./BLipWmbO.js";import{r as G,a as A}from"./PWujaAda.js";let s=class extends V{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){return U(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:e,grid:r}=this;if(!r||!e||!j(r.center.spatialReference,e))return null;try{const t=F(r.center,e),i=e.isWrappable&&this.view?.center!=null?W(t.x,this.view.center.x,e):t.x;return d(i,t.y,t.z)}catch(t){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",t),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:r}=this;if(!r||!e)return 1;const{majorLineInterval:t,dynamicScaling:i}=r;return t<1?null:I(t,e,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?D(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*H(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?T(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:r}=this;return r&&e?e/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,r,t){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||t.feature?.attributes&&k in t.feature.attributes)return[];const a=t.coordinateHelper.arrayToPoint(e),l=i.distance*(t.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(e,r){const t=[],{grid:i,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:S,viewMetersPerSRUnit:f,offsetScaleFactor:w,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(i&&S&&f&&l&&g&&w&&C&&$)||!i.dynamicScaling&&$<_||!j(e.spatialReference,g))return t;const y=F(e,g),z=d(y.x,y.y,y.z),u=h(z,-a,l,-n),P=C/f*w,c=B(u,P,l),{shouldSnapX:m,shouldSnapY:v}=J(c,u,r,S,f);if(!m&&!v)return[];const L=d((m?c:u)[0],(v?c:u)[1]),M=h(L,a,l,n),b=h(c,a,l,n);if(v){const R=O(c,u,P,"y"),x=h(R,a,l,n);t.push(new G({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(m){const R=O(c,u,P,"x"),x=h(R,a,l,n);t.push(new G({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return m&&v&&t.push(new A(M,t[0],t[1],!1)),t}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([X("esri.views.interactive.snapping.GridSnappingEngine")],s);const h=(e,r,t,i)=>{const n=q(e[0],e[1],e[2]);return E(n,E(n,n,t,r),t,i)},B=(e,r,t)=>{const i=(e[0]-t[0])/r,n=(e[1]-t[1])/r,a=Math.trunc(i),l=Math.trunc(n),S=Math.round(i%1),f=Math.round(n%1),w=t[0]+(a+S)*r,g=t[1]+(l+f)*r;return d(w,g)},J=(e,r,t,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(e[0]-r[0])/i,l=(e[1]-r[1])/i;return{shouldSnapX:Math.abs(a*n)<t,shouldSnapY:Math.abs(l*n)<t}},O=(e,r,t,i)=>{if(i==="y"){const a=r[0]>e[0]?1:-1;return d(e[0]+t*a,e[1])}const n=r[1]>e[1]?1:-1;return d(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
