import{l as h,bS as n,r as s,m as i,v as d,a as S,aR as g,H as y}from"./-Rap9rN9.js";import{v as f}from"./Do8kswpP.js";import{f as R,s as v}from"./-1lFHQHv.js";import{o as w}from"./BIgXkzOy.js";let o=class extends h{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map((a=>a.toJSON())),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:f(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:d,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([S("esri.rest.support.ProjectParameters")],o);const j=g(o);async function $(e,t,r){t=j(t);const a=R(e),m={...a.query,f:"json",...t.toJSON()},p=t.outSpatialReference,u=f(t.geometries[0]),c=v(m,r);return y(a.path+"/project",c).then((({data:{geometries:l}})=>w(l,u,p)))}export{$ as n,o as p};
