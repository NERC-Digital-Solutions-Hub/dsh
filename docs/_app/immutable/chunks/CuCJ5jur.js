import{l as m,r as s,m as a,o as u,a as g,H as y}from"./-Rap9rN9.js";import{f as b,u as j,s as U}from"./-1lFHQHv.js";let n=class extends m{constructor(r){super(r),this.container=null,this.ranges=null}readContainer(r,e){return{sourceId:e.sourceId,globalId:e.globalId}}readRanges(r,e){return[...e.gaps.map((t=>({firstUnit:t.start,numUnits:t.end-t.start+1,isGap:!0}))),...e.unitIdentifiers.map((t=>({firstUnit:t.firstUnit,numUnits:t.numUnits,isGap:!1,content:{sourceId:t.sourceId,globalId:t.globalId}})))]}};s([a({type:Object})],n.prototype,"container",void 0),s([u("container",["sourceId","globalId"])],n.prototype,"readContainer",null),s([a({type:[Object]})],n.prototype,"ranges",void 0),s([u("ranges",["gaps","unitIdentifiers"])],n.prototype,"readRanges",null),n=s([g("esri.rest.networks.unitIdentifiers.support.UnitQueryResult")],n);async function q(r,e,t){const o=b(r),i=e.toJSON();e.objects&&(i.objects=JSON.stringify(e.objects));const p={...i,f:"json"},d=j({...o.query,...p}),l=U(d,{...t,method:"post"}),c=`${o.path}/unitIdentifiers/query`,{data:f}=await y(c,l);return f.objects.map((I=>n.fromJSON(I)))}export{q as queryUnitIdentifiers};
