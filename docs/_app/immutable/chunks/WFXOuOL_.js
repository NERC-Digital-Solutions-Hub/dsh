import{ag as a}from"./-Rap9rN9.js";import{s as e,i as h,u as c}from"./WueXqdeo.js";import{q as m,N as l}from"./DIQz3k7I.js";import{I as p,a3 as u}from"./Buev1GnW.js";import"./Cs2HcN_w.js";import"./DTC5Vm2r.js";function k(){return a("curve-densification-coarse-segments")}function f(){return a("curve-densification-max-segments")}function z(){return a("curve-densification-min-segments")}function I(){return a("curve-densification-pixel-deviation")}class Z{constructor(s,n,i){this.uid=s,this.geometry=n,this.attributes=i,this.visible=!0,this.objectId=null,this.centroid=null}}function j(t){return t.geometry!=null}class w{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function F(t){if(t==null)return 0;switch(t.type){case"point":return e+10+8+24;case"polyline":case"polygon":{let s=0;const n=2+(t.hasZ?1:0)+(t.hasM?1:0),i=t.type==="polyline"?t.paths:t.rings;if((t.type==="polyline"?t.curvePaths:t.curveRings)?.length){const o=3*f()*128;s=8*o*n+128*o+32*(i.length+1)}else s=c(i);return e+64+s+34}case"multipoint":{const s=c(t.points);return e+s+64+34+32}case"extent":return e+10+64+34;case"mesh":{const s=t.vertexAttributes;return e+h(s.position,s.normal,s.uv,s.tangent)}default:return e}}function N(t,s){switch(m(s),t.type==="mesh"&&(t=t.extent),t.type){case"point":s[0]=s[3]=t.x,s[1]=s[4]=t.y,t.hasZ&&(s[2]=s[5]=t.z);break;case"polyline":for(let n=0;n<t.paths.length;n++)l(s,t.paths[n],!!t.hasZ);break;case"polygon":for(let n=0;n<t.rings.length;n++)l(s,t.rings[n],!!t.hasZ);break;case"multipoint":l(s,t.points,!!t.hasZ);break;case"extent":s[0]=t.xmin,s[1]=t.ymin,s[3]=t.xmax,s[4]=t.ymax,t.zmin!=null&&(s[2]=t.zmin),t.zmax!=null&&(s[5]=t.zmax)}return s}function R(t,s){switch(p(s),t.type==="mesh"&&(t=t.extent),t.type){case"point":s[0]=s[2]=t.x,s[1]=s[3]=t.y;break;case"polyline":for(let n=0;n<t.paths.length;n++)u(s,t.paths[n]);break;case"polygon":for(let n=0;n<t.rings.length;n++)u(s,t.rings[n]);break;case"multipoint":u(s,t.points);break;case"extent":s[0]=t.xmin,s[1]=t.ymin,s[2]=t.xmax,s[3]=t.ymax}}function $(t,s){return t.objectId!=null?t.objectId:t.attributes&&s?t.attributes[s]:null}function M(t,s,n,i){if(s?.size&&n!=null&&t)for(const r in t){if(!s.has(r))continue;const o=t[r];typeof o=="string"&&o.length>n&&(i(r),t[r]="")}}export{F,$ as R,j as b,Z as d,f as e,z as i,k as n,I as t,N as v,M as w,w as x,R as z};
