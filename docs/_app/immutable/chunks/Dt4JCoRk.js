import{x as s,r as o,m as i,a as p}from"./IsMQoFqb.js";import{i as u}from"./B5jfOAyC.js";import{r as z}from"./DMe-3uY7.js";const y=s()({naturalLog:"natural-log",squareRoot:"square-root",percentOfTotal:"percent-of-total",log:"log",field:"field"}),e="percent-of-total",l="field",f=m=>{let t=class extends m{constructor(){super(...arguments),this.normalizationField=null,this.normalizationMaxValue=null,this.normalizationMinValue=null,this.normalizationTotal=null}get normalizationType(){let a=this._get("normalizationType");const n=!!this.normalizationField,r=this.normalizationTotal!=null;return n||r?(a=n&&l||r&&e||null,n&&r&&u.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")):a!==l&&a!==e||(a=null),a}set normalizationType(a){this._set("normalizationType",a)}};return o([i({type:String,json:{name:"parameters.normalizationField",write:!0}})],t.prototype,"normalizationField",void 0),o([i({type:Number,json:{name:"parameters.normalizationMaxValue",write:!0}})],t.prototype,"normalizationMaxValue",void 0),o([i({type:Number,json:{name:"parameters.normalizationMinValue",write:!0}})],t.prototype,"normalizationMinValue",void 0),o([i({type:Number,json:{name:"parameters.normalizationTotal",write:!0}})],t.prototype,"normalizationTotal",void 0),o([z(y,{name:"parameters.normalizationType"})],t.prototype,"normalizationType",null),t=o([p("esri.rest.support.NormalizationBinParametersMixin")],t),t};export{f as m,y as n};
