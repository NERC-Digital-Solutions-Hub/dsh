import{v as d,bd as n,r as s,m as i,H as h,a as S,av as g,I as y}from"./CtNvT6K6.js";import{v as m}from"./AxdB50Uq.js";import{f as v,s as R}from"./BgJlXcGt.js";import{o as w}from"./C62mDuHe.js";import"./ZGrc7RNF.js";import"./Bxh34c20.js";let o=class extends d{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map((a=>a.toJSON())),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:m(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:h,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([S("esri.rest.support.ProjectParameters")],o);const j=g(o);async function H(e,t,r){t=j(t);const a=v(e),p={...a.query,f:"json",...t.toJSON()},f=t.outSpatialReference,u=m(t.geometries[0]),c=R(p,r);return y(a.path+"/project",c).then((({data:{geometries:l}})=>w(l,u,f)))}export{H as n,o as p};
