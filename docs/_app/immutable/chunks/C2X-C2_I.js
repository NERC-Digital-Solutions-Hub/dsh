import{H as l}from"./Q08H8bVX.js";import{l as y,r as a,m as d,a as f,ag as g}from"./Bcg-2HKw.js";import{i as w}from"./DGjcIG0n.js";import{i as v}from"./BXg3w60Q.js";import{f as S,u as $,s as j}from"./CsRM10rB.js";import"./w-2V2ENZ.js";import{d as I}from"./DIVME3AX.js";let r=class extends y{constructor(e){super(e),this.associations=[]}};a([d({type:[I],json:{write:!0}})],r.prototype,"associations",void 0),r=a([f("esri.rest.networks.support.QueryAssociationsResult")],r);function J(o){const{returnDeletes:e,elements:n,gdbVersion:s,moment:i}=o.toJSON();return{returnDeletes:e,elements:JSON.stringify(n.map((t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId})))),types:JSON.stringify(o.types.map((t=>v.toJSON(t)))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:s,moment:i??Date.now()}}async function x(o,e,n){const s=S(o),i={...J(e),f:"json"},t=$({...s.query,...i}),c=j(t,{...n,method:"post"}),p=`${s.path}/associations/query`,{data:m}=await l(p,c),u=r.fromJSON(m);return e.types.includes("connectivity")&&g(w.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://arcg.is/11Tr8a#types",version:"4.29",warnOnce:!0}),u}export{x as queryAssociations};
